
//Мы создаем еще один интерфейс так как при использовании asyncThunk в ответ на запрос может прийти ошибка  error
// в виде объекта ответа со своими полями. В ответе помимо массива  CAR или других переменных может прийти объект  error в нем будут поля а в них в виде строчки детали ошибок
// и при наличии ошибки эти поля могут быть массивом строчек.
// Поэтому мы используем обозначения  ?: что означает что поля внутри объекта  могут быть все или некоторые из них.
// Далле даный интерфейс помещаем в интерфейс Istate вместе c остальными типизированными переменными в хранилище Redux.
//ПРимер
// interface IState {
//     cars: ICar[],
//     errors: IError,
//     trigger: boolean,
//     carForUpdate: ICar
// }

export interface IError {
    detail?: string
    brand?: string[]
    price?: string[]
    year?: string[]
}
